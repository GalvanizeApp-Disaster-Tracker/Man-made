{"version":3,"sources":["aqi.jpg","Search.js","NavBar.js","AQIData.js","Article.js","Headlines.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","useState","selectedCountry","setSelectedCountry","states","setStates","selectedState","setSelectedState","cities","setCities","selectedCity","setSelectedCity","setTheStates","e","a","country","target","value","fetch","apiKey","then","response","json","result","data","catch","error","console","log","setTheCities","state","setTheCurrentLocation","city","setCurrentLocation","className","onChange","selected","countries","map","key","type","onClick","NavBar","nearestLocation","AQIData","aqius","setAQIUS","threatLevel","setThreatLevel","useEffect","currentLocation","current","pollution","color","document","body","style","backgroundColor","src","logo","alt","concern","description","Article","image","message","articleDate","location","summary","href","articleLink","Headlines","disasters","setDisasters","id","disaster","App","isLoading","setIsLoading","setNearestLocation","setCountries","fetchCountries","fetchNearest","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06eefb6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aqi.dd661a9a.jpg\";","import React, { useState } from 'react'\r\n\r\nconst Search = (props) => {\r\n    let [selectedCountry, setSelectedCountry] = useState(\"\");\r\n    let [states, setStates] = useState([]);\r\n    let [selectedState, setSelectedState] = useState(\"\");\r\n    let [cities, setCities] = useState([]);\r\n    let [selectedCity, setSelectedCity] = useState(\"\");\r\n\r\n    let setTheStates = async function setTheStates(e) {\r\n        let country = e.target.value;\r\n        setSelectedCountry(country);\r\n        setSelectedState(\"\");\r\n        setCities([]);\r\n        setSelectedCity(\"\");\r\n        await fetch(\"http://api.airvisual.com/v2/states?country=\" + e.target.value + \"&key=\" + props.apiKey)\r\n            .then(response => response.json())\r\n            .then(result => setStates(result.data))\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    let setTheCities = async function setTheCities(e) {\r\n        let state = e.target.value;\r\n        setSelectedState(state);\r\n        setSelectedCity(\"\");\r\n        await fetch(\"http://api.airvisual.com/v2/cities?state=\" + e.target.value +\r\n            \"&country=\" + selectedCountry + \"&key=\" + props.apiKey)\r\n            .then(response => response.json())\r\n            .then(result => setCities(result.data))\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    let setTheCurrentLocation = async function setTheCurrentLocation(city, state, country) {\r\n        \r\n        await fetch(\"http://api.airvisual.com/v2/city?city=\" + city + \"&state=\" + state + \"&country=\" +\r\n            country + \"&key=\" + props.apiKey)\r\n            .then(response => response.json())\r\n            .then(result => props.setCurrentLocation(result.data))\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    return (\r\n        <form className=\"nav-form\">\r\n            <select onChange={e => setTheStates(e)}>\r\n                <option selected value>--Choose a country--</option>\r\n                {props.countries.map((country) => <option key={country.country} value={country.country}>{country.country}</option>)}\r\n            </select>\r\n            <select onChange={e => setTheCities(e)}>\r\n                <option selected value>--Choose a state--</option>\r\n                {states.map((state) => <option key={state.state} value={state.state}>{state.state}</option>)}\r\n            </select>\r\n            <select onChange={e => setSelectedCity(e.target.value)}>\r\n                <option selected value>--Choose a city--</option>\r\n                {cities.map((city) => <option key={city.city} value={city.city}>{city.city}</option>)}\r\n            </select>\r\n            <button type=\"button\" className=\"btn btn-light\" onClick={() => setTheCurrentLocation(selectedCity,\r\n                selectedState, selectedCountry)}>Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Search","import React, { useCallback } from 'react'\r\nimport Search from './Search'\r\nimport logo from './aqi.jpg'\r\n\r\nconst NavBar = (props) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-between\">\r\n            <button type=\"button\" className=\"btn btn-light\" onClick={() => props.setCurrentLocation(props.nearestLocation)}>Home</button>\r\n            <Search countries={props.countries} apiKey={props.apiKey}\r\n                setCurrentLocation={props.setCurrentLocation} />\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default NavBar","import React, { useState, useEffect } from 'react'\r\nimport logo from './aqi.jpg'\r\n\r\nconst AQIData = (props) => {\r\n    let [aqius, setAQIUS] = useState();\r\n    let [threatLevel, setThreatLevel] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (props.currentLocation.current) {\r\n            function getThreatLevel() {\r\n                fetch(\"/levels/\" + props.currentLocation.current.pollution.aqius)\r\n                    .then(response => response.json())\r\n                    .then(result => setThreatLevel(result))\r\n                   .catch(error => console.log('error', error));\r\n\r\n            }\r\n            getThreatLevel();\r\n            setAQIUS(props.currentLocation.current.pollution.aqius);\r\n        }\r\n    }, [props.currentLocation])\r\n\r\n    useEffect(() => {\r\n        if (threatLevel.color) {\r\n            function changeBackgroundColor(color) {\r\n                document.body.style.backgroundColor = color;\r\n            }\r\n            changeBackgroundColor(threatLevel.color);\r\n        }\r\n    }, [threatLevel.color])\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img className=\"card-img-top\" src={logo} alt=\"Air Quality Index Logo\" />\r\n            <div className=\"card-body\">\r\n                <h2>{props.currentLocation.city}, {props.currentLocation.state}, {props.currentLocation.country}</h2>\r\n                <br>\r\n                </br>\r\n                <h3>{aqius}</h3>\r\n                <br />\r\n                <h4>{threatLevel.concern}</h4>\r\n                <br />\r\n                <h4>{threatLevel.description}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AQIData","import React from 'react'\r\n\r\nconst Article = (props) => {\r\n\r\n    return(\r\n        <div className=\"article-div\">\r\n            <img src={props.data.image} alt={props.data.message} className=\"article-img\"></img>\r\n            <div className=\"article-body\">\r\n            <h3>{props.data.message}</h3><p>{props.data.articleDate}, {props.data.location}</p>\r\n            <p>{props.data.summary}</p><a href={props.data.articleLink} target=\"_blank\">Read More...</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Article","import React, { useState, useEffect } from 'react'\r\nimport Article from './Article'\r\n\r\nfunction Headlines() {\r\n    let [disasters, setDisasters] = useState([]);\r\n\r\n    useEffect(() => {\r\n            function getDisasters() {\r\n                fetch(\"/disasters\")\r\n                    .then(response => response.json())\r\n                    .then(result => setDisasters(result))\r\n                   .catch(error => console.log('error', error));\r\n\r\n            }\r\n            getDisasters();\r\n    }, [])\r\n\r\n    return (\r\n        <div id=\"article-space\">\r\n            <h3>Read the following articles to learn what's going on in the world, and how you can help.</h3>\r\n            {disasters.map(disaster => <Article data={disaster} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Headlines","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport NavBar from './NavBar'\nimport AQIData from './AQIData'\nimport Headlines from './Headlines'\n\n\n\nfunction App() {\n  let [isLoading, setIsLoading] = useState(true);\n  let [currentLocation, setCurrentLocation] = useState({});\n  let [nearestLocation, setNearestLocation] = useState({});\n  let [countries, setCountries] = useState([]);\n  let [apiKey, setKey] = useState(\"66f2cb04-569e-48b4-8505-4dd21c814ac9\")\n\n  useEffect(() => {\n    async function fetchCountries() {\n      await fetch(\"http://api.airvisual.com/v2/countries?key=\" + apiKey)\n        .then(response => response.json())\n        .then(result => setCountries(result.data))\n        .catch(error => console.log('error', error));\n    }\n    fetchCountries();\n    setIsLoading(false);\n  }, [])\n\n  useEffect(() => {\n    async function fetchNearest() {\n      await fetch(\"http://api.airvisual.com/v2/nearest_city?key=\" + apiKey)\n        .then(response => response.json())\n        .then(result => setNearestLocation(result.data))\n        .catch(error => console.log('error', error));\n    }\n    fetchNearest();\n  }, [])\n\n  useEffect(() => {\n    async function fetchNearest() {\n      await fetch(\"http://api.airvisual.com/v2/nearest_city?key=\" + apiKey)\n        .then(response => response.json())\n        .then(result => setCurrentLocation(result.data))\n        .catch(error => console.log('error', error));\n    }\n    fetchNearest();\n  }, [])\n\n  if (isLoading) {\n    return <p>Loading...</p>\n  } else {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Our Man-Made Disasters</h1>\n          <h3>Oil spills. Industrial fires. Deforestation. Pollution.</h3>\n          <h4>Learn where your city stands, and read more about current man-made disasters. You can make a difference.</h4>\n          <NavBar countries={countries} apiKey={apiKey} setCurrentLocation={setCurrentLocation} nearestLocation={nearestLocation} />\n        </header>\n          <AQIData currentLocation={currentLocation} />\n          <Headlines />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}